#!/bin/bash
# Copyright 2021 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is adapted from the generic google_set_multiqueue tuning script,
# with following modifications:
# - The queue count is set to align with the physical CPU core count
# - Apply XPS to all physical cores
# - Apply tunings validated on a set of HPC workloads

VIRTIO_NET_DIR=/sys/bus/virtio/drivers/virtio_net
VIRTIO_NET_DEVS=${VIRTIO_NET_DIR}/virtio*
GVNIC_DIR=/sys/bus/pci/drivers/gvnic
GVNIC_DEVS=${GVNIC_DIR}/0*
IRQ_DIR=/proc/irq/*
MULTIQUEUE_FALLBACK=/usr/bin/google_set_multiqueue

function set_multiqueue_fallback() {
  echo "Fallback to ${MULTIQUEUE_FALLBACK}..."
  [[ -f ${MULTIQUEUE_FALLBACK} ]] && ${MULTIQUEUE_FALLBACK} \
    || echo "${MULTIQUEUE_FALLBACK} not found."
  exit 0
}

function get_phy_cpus() {
  # get cpu socket count
  nr_socket=$(grep -i "physical id" /proc/cpuinfo | sort -u | wc -l)

  # get physical core count
  nr_phy_cpus=$(lscpu -p | grep -v '^#' | sort -t, -k 2,4 -u | wc -l)

  nr_per_socket=$((nr_phy_cpus/nr_socket))

  [[ -z ${nr_socket} ]] && set_multiqueue_fallback
  [[ -z ${nr_phy_cpus} ]] && set_multiqueue_fallback
  [[ -z ${nr_per_socket} ]] && set_multiqueue_fallback

  # fallback to standard multiqueue script for smaller VM shapes
  [[ ${nr_phy_cpus} -lt 15 ]] && set_multiqueue_fallback
}

function set_virtionet_channels() {
  max_channels=$(ethtool -l "${eth_dev}" | grep -m 1 Combined | cut -f2)
  [[ "${max_channels}" -eq "1" ]] && return

  # max_channels is not an integer
  [[ ! "${max_channels}" -eq "${max_channels}" ]] && return

  # use nr_phy_cpus as queue count
  [[ ${nr_phy_cpus} -lt ${max_channels} ]] && max_channels=${nr_phy_cpus}

  echo "Set channels for $eth_dev to $max_channels."
  ethtool -L "${eth_dev}" combined "${max_channels}" > /dev/null 2>&1
}

function set_virtionet_irq() {
  dev=$(basename "$dev")
  for irq in ${IRQ_DIR}
  do
    smp_affinity="${irq}/smp_affinity_list"
    [[ ! -f "${smp_affinity}" ]] && continue
    # Classify this IRQ as virtionet intx, virtionet MSI-X, or non-virtionet
    # If the IRQ type is virtionet intx, a subdirectory with the same name as
    # the device will be present. If the IRQ type is virtionet MSI-X, then
    # a subdirectory of the form <device name>-<input|output>.N will exist.
    # In this case, N is the input (output) queue number, and is specified as
    # a decimal integer ranging from 0 to K - 1 where K is the number of
    # input (output) queues in the virtionet device.
    virtionet_intx_dir="${irq}/${dev}"
    virtionet_msix_dir_regex=".*/${dev}-(input|output)\.([0-9]+)$"
    if [[ -d "${virtionet_intx_dir}" ]]; then
      # All virtionet intx IRQs are delivered to CPU 0
      echo "Setting ${smp_affinity} to 01 for device ${dev}."
      echo "01" > "${smp_affinity}"
      continue
    fi
    # Not virtionet intx, probe for MSI-X
    virtionet_msix_found=0
    for entry in ${irq}/${dev}*; do
      if [[ "$entry" =~ ${virtionet_msix_dir_regex} ]]; then
        virtionet_msix_found=1
        queue_num=${BASH_REMATCH[2]}
      fi
    done
    affinity_hint="${irq}/affinity_hint"
    [[ "$virtionet_msix_found" -eq 0 || ! -f "${affinity_hint}" ]] && continue

    # HPC workloads can have high throughput on a smaller number of flows.
    # Assign more than one CPU (when available) for each IRQ to mitigate the
    # pressure on RSS hash collision.
    queues=()
    for q in $(seq $((queue_num % nr_per_socket)) ${nr_per_socket} $((nr_phy_cpus - 1))); do
      queues=("${queues[@]}" "${q}")
    done
    queues_string=$(IFS=, ; echo "${queues[*]}")

    # Set the IRQ CPU affinity with queues_string
    echo "Setting ${smp_affinity} to ${queues_string} for device ${dev}."
    echo "${queues_string}" > "${smp_affinity}"
    real_affinity=$(cat "${smp_affinity}")
    echo "${smp_affinity}: real affinity ${real_affinity}"
  done
}

function set_gvnic_channels() {
  max_channels=$(ethtool -l "${eth_dev}" | grep -m 1 RX | cut -d':' -f2)
  [[ -z ${max_channels} ]] && return
  [[ "${max_channels}" -eq "1" ]] && return

  # max_channels is not an integer
  [[ ! "${max_channels}" -eq "${max_channels}" ]] && return

  # use nr_per_socket as queue count
  [[ ${nr_per_socket} -lt ${max_channels} ]] && max_channels=${nr_per_socket}

  echo "Set channels for $eth_dev to $max_channels."
  ethtool -L "${eth_dev}" rx "${max_channels}" > /dev/null 2>&1
  ethtool -L "${eth_dev}" tx "${max_channels}" > /dev/null 2>&1
}

function set_gvnic_irq() {
  # Set smp_affinity properly for gvnic queues. '-ntfy-block.' is unique to gve
  # and will not affect virtio queues.
  for i in ${IRQ_DIR}; do
    if ls "${i}"/*-ntfy-block.* 1> /dev/null 2>&1; then
      if [[ -f ${i}/affinity_hint ]]; then
        echo Setting smp_affinity on "${i}" to "$(cat "${i}/affinity_hint")"
        cp "${i}/affinity_hint" "${i}/smp_affinity"
        real_affinity=$(cat "${i}/smp_affinity_list")
        echo "${i}: real affinity ${real_affinity}"
      fi
    fi
  done
}

function set_xps {
  XPS=/sys/class/net/e*/queues/tx*/xps_cpus

  # If we have more CPUs than queues, then stripe CPUs across tx affinity
  # as CPUNumber % queue_count.
  for q in $XPS; do
    queue_re=".*tx-([0-9]+).*$"
    if [[ "$q" =~ ${queue_re} ]]; then
      queue_num=${BASH_REMATCH[1]}
    fi

    # Linux xps_cpus requires a hex number with commas every 32 bits. It ignores
    # all bits above # cpus, so write a list of comma separated 32 bit hex values
    # with a comma between dwords.
    xps_dwords=()
    xps=0
    cpu_offset=0
    for cpu in $(seq "${queue_num}" "${max_channels}" $((nr_phy_cpus - 1))); do
      if [[ ${cpu} -ge $((cpu_offset + 32)) ]]; then
        xps_dwords=($(printf "%08x" $((xps & 0xffffffff))) "${xps_dwords[@]}")
        xps=$((xps >> 32))
        cpu_offset=$((cpu_offset + 32))
      fi
      xps=$((xps | (1 << (cpu - cpu_offset))))
    done

    [[ ! -z ${xps} ]] && xps_dwords=($(printf "%08x" $((xps & 0xffffffff))) "${xps_dwords[@]}")

    xps_string=$(IFS=, ; echo "${xps_dwords[*]}")
    echo "${xps_string}" > "$q"
    printf "Queue %d XPS=%s for %s\n" "$queue_num" "$(cat "$q")" "$q"
  done | sort -n -k2
}

function set_net_devs {
  if [[ ! -x "$(command -v ethtool)" ]]; then
    echo "ethtool not found."
    exit 1
  fi

  if [[ -d "$VIRTIO_NET_DIR" ]]; then
    # Loop through all the virtionet devices and enable multi-queue
    for dev in $VIRTIO_NET_DEVS; do
      ETH_DEVS="${dev}/net/*"
      for eth_dev in $ETH_DEVS; do
        eth_dev=$(basename "$eth_dev")
        if ! errormsg=$(ethtool -l "$eth_dev" 2>&1); then
          echo "ethtool says that $eth_dev does not support virtionet multiqueue: $errormsg."
          continue
        fi
        echo "Found virtio-net device: $eth_dev"
        set_virtionet_channels
        set_virtionet_irq
      done
    done
  fi

  if [[ -d "$GVNIC_DIR" ]]; then
    # Loop through all the GVNIC devices
    for dev in $GVNIC_DEVS; do
      ETH_DEVS="${dev}/net/*"
      for eth_dev in $ETH_DEVS; do
        eth_dev=$(basename "$eth_dev")
        if ! errormsg=$(ethtool -l "$eth_dev" 2>&1); then
          echo "ethtool says that $eth_dev does not support gVNIC multiqueue: $errormsg."
          continue
        fi
        echo "Found gVNIC device: $eth_dev"
        set_gvnic_channels
      done
      # apply affinity_hint to all gvnic IRQs
      set_gvnic_irq
    done
  fi
  set_xps
}

echo "Running $(basename "$0")."
get_phy_cpus
set_net_devs
