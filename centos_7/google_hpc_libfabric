#!/bin/bash
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# MPI installation script
# This script handles the build and installation of NET and PSM3 Libfabric 
# provider. This script is intended to be used on Google Cloud HPC Image
# and is validated on GCP CentOS 7 image.

readonly SRC_DOWNLOAD="/tmp/google_hpc_libfabric/"
readonly DEFAULT_INSTALL_DIR="/opt/libfabric"
readonly MOTD="/etc/motd"
readonly PATCH="/usr/share/google-hpc-compute/libfabric/net-src-patch"
# Libfabric Provider Info
readonly NET_VERSION="v1.17.0"
readonly NET_SRC="https://github.com/ofiwg/libfabric/archive/refs/tags/v1.17.0.tar.gz"
readonly NET_SHA="fba6feed61c863d07d3dbb75eb4026c2c4a70bfa0565405fc5eb01954f1fefa3495f5252f8382e94b635ec61d1ce8dd748a86458dcb55129cdd42763f3abecee"
readonly NET_TAR="v1.17.0.tar.gz"
readonly NET_DIR="libfabric-1.17.0"
readonly PSM3_VERSION="11.4.1.0.8"
readonly PSM3_SRC="https://github.com/intel/eth-psm3-fi/archive/refs/tags/v11.4.1.0.tar.gz"
readonly PSM3_SHA="6125f080836ac375783ab46fcaeb65e068b77a18c7e88e8a1b4e8418fb35b73734c53066b54ba57cc2b93858495ca4a8dd35bbe92337530e5ee097624ebfa61e"
readonly PSM3_TAR="v11.4.1.0.tar.gz"
readonly PSM3_DIR="eth-psm3-fi-11.4.1.0"

# Set some default values:
net=0
psm3=0
dryrun=0
cleanup=0
show_usage=1

# Default target directory is /opt/intel/, set to "" for setopts
install_dir=${DEFAULT_INSTALL_DIR}

# Package list
PREREQ_RPM_LIST=(
"wget"
"libuuid-devel"
"numactl-libs"
"numactl-devel"
)

EL7_RPM_GROUP_LIST=(
"Development tools"
)

usage()
{
  cat <<EOF
  Usage:
    Verify installation steps: $(basename "$0") [options] --dryrun
    Apply installation: $(basename "$0") [options]

  Options:
    -h | --help          Display help message
    --dryrun             Do not execute commands
    --net                Build the Libfabric NET Provider
    --psm3               Build the Libfabric PSM3 Provider
    --install_dir        Configure the prefix directory for installations 
                         Default location is set to /opt/Libfabric
    --cleanup            Remove the downloaded source code in /tmp/src_download/
EOF
}

run() {
  if [[ "$dryrun" = 1 ]]; then
    echo "$*"
  else
    eval "$*"
  fi
}

check_targetdir()
{
  # Configure the instal_dir path
  if [[ -f ${install_dir}/mpi/2021.8.0/bin/mpirun  ]] && [[ -d ${install_dir}/mpi/2021.8.0/libfabric/lib/prov ]]; then
    echo "Intel MPI 2021.8 is installed"
    TARGET_DIR=${install_dir}/mpi/2021.8.0/libfabric/lib/prov
  else
    echo "The path provided does not contain IntelMPI 2021.8"
    TARGET_DIR=${install_dir}
  fi

  if [[ ! -d ${install_dir} ]]; then
    echo "${install_dir} does not exist. Create the ${install_dir} directory."
    PARENT_DIR=$(dirname ${install_dir})
    if [[ ! -w ${PARENT_DIR} ]]; then
      echo "You do not have permission to write to the directory ${PARENT_DIR}."
      exit 1
    fi
    run mkdir -p ${install_dir}
  fi
}

check_access()
{
if [[ ! -w ${TARGET_DIR} ]]; then
  echo "You do not have permission to write the directory ${TARGET_DIR}."
  exit 1
fi
}

install_prereqs()
{
  for package in ${PREREQ_RPM_LIST[@]}; do
    run "rpm -qi ${package} 2>1 >/dev/null || run sudo yum install -y "${package}""
  done

  for ((i = 0; i < ${#EL7_RPM_GROUP_LIST[@]}; i++)); do
    # install the package group
    run sudo yum groupinstall -y "${EL7_RPM_GROUP_LIST[$i]}"
  done
}

# Build the Libfabric NET provider
build_net()
{
  # Get from upstream libfabric release
  run wget -P ${SRC_DOWNLOAD} ${NET_SRC}
  CHECKSHA=$(sha512sum ${SRC_DOWNLOAD}/${NET_TAR} | awk '{print $1}')
  if [[ ! ${CHECKSHA} = ${NET_SHA}  ]]; then
    run echo "The SHA512SUM check FAILED"
    run echo -e "Expect SHA512SUM \n ${NET_SHA}"
    run echo -e "The downloaded Tarball SHA5112SUM \n ${CHECKSHA}"
    exit 1
  fi
  run tar xf ${SRC_DOWNLOAD}/${NET_TAR} -C ${SRC_DOWNLOAD}

  # Patch the Net Provider for IMPI2021.8 compatibility
  run patch -d ${SRC_DOWNLOAD} -p0 < ${PATCH}

  run cd ${SRC_DOWNLOAD}/${NET_DIR}
  # Configure and build the binary
  run ./autogen.sh
  run ./configure --enable-only --enable-net=dl --prefix=${SRC_DOWNLOAD}/net-bin/
  run make -j install
}

build_psm3()
{
  # Get from upstream libfabric release
  run wget -P ${SRC_DOWNLOAD} ${PSM3_SRC}
  CHECKSHA=$(sha512sum ${SRC_DOWNLOAD}/${PSM3_TAR} | awk '{print $1}')
  if [[ ! ${CHECKSHA} = ${PSM3_SHA}  ]]; then
    run echo "The SHA512SUM check FAILED"
    run echo -e "Expect SHA512SUM \n ${PSM3_SHA}"
    run echo -e "The downloaded Tarball SHA5112SUM \n ${CHECKSHA}"
    exit 1
  fi
  run tar xf ${SRC_DOWNLOAD}/${PSM3_TAR} -C ${SRC_DOWNLOAD}

  run cd ${SRC_DOWNLOAD}/${PSM3_DIR}
  # Configure and build the binary
  run ./autogen.sh
  run ./configure --disable-psm3-verbs --enable-psm3-udp --prefix=${SRC_DOWNLOAD}/psm3-bin/
  run make -j install
}

install_libfabric()
{
  echo "Add the libfabric binary to ${TARGET_DIR}"

  # Install NET provider to target dir
  if [[ ${net} = 1 ]]; then
    echo "The Net provider ${NET_VERSION} is installed to ${TARGET_DIR}"
    run cp ${SRC_DOWNLOAD}/net-bin/lib/libfabric/libnet-fi.so ${TARGET_DIR}/libnet-fi.so
    run rm -rf ${SRC_DOWNLOAD}/net-bin
  fi

  # Install PSM3 provider to target dir
  if [[ ${psm3} = 1 ]]; then
    echo "The PSM3 provider ${PSM3_VERSION} is installed to ${TARGET_DIR}"
    run cp ${SRC_DOWNLOAD}/psm3-bin/lib/libfabric/libpsm3-fi.so.1.19.0 ${TARGET_DIR}/libpsm3-fi.so.1.19.0
    run rm -f ${TARGET_DIR}/libpsm3-fi.so
    run ln -s ${TARGET_DIR}/libpsm3-fi.so.1.19.0 ${TARGET_DIR}/libpsm3-fi.so
    run rm -rf ${SRC_DOWNLOAD}/psm3-bin
  fi
}

setopts()
{
  VALID_ARGUMENTS=$?
  if [ "$VALID_ARGUMENTS" != "0" ]; then
    echo "Invalid option inputs."
    usage
    exit 1
  fi

  eval set -- "$PARSED_ARGUMENTS"
  while true;
  do
    if [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
      usage
      exit 0
    elif [[ "$1" = "--install_dir" ]]; then
      shift
      install_dir=$1
      shift
    elif [[ "$1" = "--net" ]]; then
      net=1
      show_usage=0
      shift
    elif [[ "$1" = "--psm3" ]]; then
      psm3=1
      show_usage=0
      shift
    elif [[ "$1" = "--dryrun" ]]; then
      dryrun=1
      shift
    elif [[ "$1" = "--cleanup" ]]; then
      cleanup=1
      show_usage=0
      shift
    elif [[ "$1" = "--" ]]; then
      shift
      break
    else
      echo "Unexpected option: $1"
      usage
      exit 1
    fi
  done

}

cleanup()
{
  echo "Clean up the downloaded source code"
  run rm -rf ${SRC_DOWNLOAD}
}

PARSED_ARGUMENTS=$(getopt -q -n new_cmd -o h \
    --long help,dryrun,cleanup,net,psm3,install_dir:, -- "$@")
setopts

if [[ "$show_usage" = 1 ]]; then
 usage
 exit 0
fi

# Condition checking
check_targetdir
check_access
echo "Check and install the prerequisite packages to run this script"
install_prereqs
if [[ -d ${SRC_DOWNLOAD} ]]  && [[ "$dryrun" = 0 ]]; then
  rm -rf ${SRC_DOWNLOAD}
fi
mkdir -p ${SRC_DOWNLOAD}

# Execution
[[ "$net" = 1 ]] && build_net
[[ "$psm3" = 1 ]] && build_psm3
[[ "$net" = 1 ]] || [[ "$psm3" = 1 ]] && install_libfabric
[[ "$cleanup" = 1 ]] && cleanup
exit 0